"use strict";
/********************************************************************************
 * Copyright (C) 2021 Ericsson and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai = require("chai");
var environment_utils_1 = require("./environment-utils");
var expect = chai.expect;
describe('EnvironmentUtils', function () {
    describe('#mergeProcessEnv', function () {
        var e_1, _a;
        this.timeout(5000);
        var utils;
        var PATH = 'PATH';
        beforeEach(function () {
            utils = new environment_utils_1.EnvironmentUtils();
        });
        it('should validate the presence of a known process variable', function () {
            var mergedEnv = utils.mergeProcessEnv({});
            expect(mergedEnv[PATH]).length.greaterThan(0);
        });
        var _loop_1 = function (platform) {
            it("should conserve case for keys on \"" + platform + "\"", function () {
                utils['getPlatform'] = function () { return platform; };
                process.env['TestKey'] = 'test_value';
                var mergedEnv = utils.mergeProcessEnv({});
                expect(mergedEnv['TestKey']).equal('test_value');
                expect(mergedEnv['TESTKEY']).equal(undefined);
            });
        };
        try {
            for (var _b = __values(['linux', 'darwin']), _c = _b.next(); !_c.done; _c = _b.next()) {
                var platform = _c.value;
                _loop_1(platform);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        it('should uppercase keys on "win32"', function () {
            utils['getPlatform'] = function () { return 'win32'; };
            process.env['TestKey'] = 'test_value';
            var mergedEnv = utils.mergeProcessEnv({});
            expect(mergedEnv['TestKey']).equal(undefined);
            expect(mergedEnv['TESTKEY']).equal('test_value');
        });
        it('should be possible to remove a known process variable', function () {
            var _a;
            // eslint-disable-next-line no-null/no-null
            var customizedEnv = (_a = {}, _a[PATH] = null, _a);
            var mergedEnv = utils.mergeProcessEnv(customizedEnv);
            expect(mergedEnv[PATH]).equal(undefined);
        });
        it('should be possible to override the value of a known process variable', function () {
            var _a;
            var expectedValue = '/path/to/one';
            var customizedEnv = (_a = {}, _a[PATH] = expectedValue, _a);
            var mergedEnv = utils.mergeProcessEnv(customizedEnv);
            expect(mergedEnv[PATH]).equals(expectedValue);
        });
        it('should not produce a different result when merging a previous result', function () {
            var _a;
            var variableName = 'NEW_VARIABLE';
            var expectedValue = 'true';
            var customizedEnv = (_a = {}, _a[variableName] = expectedValue, _a);
            var mergedEnv = utils.mergeProcessEnv(customizedEnv);
            expect(mergedEnv[variableName]).equals(expectedValue);
        });
        it('should not produce a different result when performing multiple merges', function () {
            var _a;
            var variableName = 'NEW_VARIABLE';
            var expectedValue = 'true';
            var customizedEnv = (_a = {}, _a[variableName] = expectedValue, _a);
            var mergedEnv = utils.mergeProcessEnv(customizedEnv);
            var mergedSecondPass = utils.mergeProcessEnv(mergedEnv);
            expect(mergedEnv).to.deep.equal(mergedSecondPass);
        });
    });
});
//# sourceMappingURL=environment-utils.spec.js.map