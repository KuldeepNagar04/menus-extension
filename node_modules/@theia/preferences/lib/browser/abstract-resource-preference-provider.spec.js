"use strict";
/********************************************************************************
 * Copyright (C) 2021 Ericsson and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-explicit-any,no-unused-expressions */
var jsdom_1 = require("@theia/core/lib/browser/test/jsdom");
var disableJSDOM = jsdom_1.enableJSDOM();
var frontend_application_config_provider_1 = require("@theia/core/lib/browser/frontend-application-config-provider");
var application_props_1 = require("@theia/application-package/lib/application-props");
frontend_application_config_provider_1.FrontendApplicationConfigProvider.set(__assign({}, application_props_1.ApplicationProps.DEFAULT.frontend.config));
var chai_1 = require("chai");
var inversify_1 = require("@theia/core/shared/inversify");
var abstract_resource_preference_provider_1 = require("./abstract-resource-preference-provider");
var file_service_1 = require("@theia/filesystem/lib/browser/file-service");
var frontend_application_bindings_1 = require("@theia/core/lib/browser/frontend-application-bindings");
var test_1 = require("@theia/core/lib/browser/preferences/test");
var promise_util_1 = require("@theia/core/lib/common/promise-util");
var monaco_text_model_service_1 = require("@theia/monaco/lib/browser/monaco-text-model-service");
var common_1 = require("@theia/core/lib/common");
var monaco_workspace_1 = require("@theia/monaco/lib/browser/monaco-workspace");
var browser_1 = require("@theia/core/lib/browser");
disableJSDOM();
var MockFileService = /** @class */ (function () {
    function MockFileService() {
        this.releaseContent = new promise_util_1.Deferred();
    }
    MockFileService.prototype.read = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.releaseContent.promise];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, { value: JSON.stringify({ 'editor.fontSize': 20 }) }];
                }
            });
        });
    };
    return MockFileService;
}());
var DO_NOTHING = function () { };
var RETURN_DISPOSABLE = function () { return common_1.Disposable.NULL; };
var MockTextModelService = /** @class */ (function () {
    function MockTextModelService() {
    }
    MockTextModelService.prototype.createModelReference = function () {
        return {
            dispose: DO_NOTHING,
            object: {
                onDidChangeContent: RETURN_DISPOSABLE,
                onDirtyChanged: RETURN_DISPOSABLE,
                onDidChangeValid: RETURN_DISPOSABLE,
            }
        };
    };
    return MockTextModelService;
}());
var mockSchemaProvider = { getCombinedSchema: function () { return ({ properties: {} }); } };
var LessAbstractPreferenceProvider = /** @class */ (function (_super) {
    __extends(LessAbstractPreferenceProvider, _super);
    function LessAbstractPreferenceProvider() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LessAbstractPreferenceProvider.prototype.getUri = function () { };
    LessAbstractPreferenceProvider.prototype.getScope = function () { };
    return LessAbstractPreferenceProvider;
}(abstract_resource_preference_provider_1.AbstractResourcePreferenceProvider));
describe('AbstractResourcePreferenceProvider', function () {
    var provider;
    var fileService;
    beforeEach(function () {
        fileService = new MockFileService();
        var testContainer = new inversify_1.Container();
        frontend_application_bindings_1.bindPreferenceService(testContainer.bind.bind(testContainer));
        test_1.bindMockPreferenceProviders(testContainer.bind.bind(testContainer), testContainer.unbind.bind(testContainer));
        testContainer.rebind(browser_1.PreferenceSchemaProvider).toConstantValue(mockSchemaProvider);
        testContainer.bind(file_service_1.FileService).toConstantValue(fileService);
        testContainer.bind(monaco_text_model_service_1.MonacoTextModelService).toConstantValue(new MockTextModelService);
        testContainer.bind(common_1.MessageService).toConstantValue(undefined);
        testContainer.bind(monaco_workspace_1.MonacoWorkspace).toConstantValue(undefined);
        provider = testContainer.resolve(LessAbstractPreferenceProvider);
    });
    it('should not store any preferences before it is ready.', function () { return __awaiter(void 0, void 0, void 0, function () {
        var resolveWhenFinished, errorIfReadyFirst;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    resolveWhenFinished = new promise_util_1.Deferred();
                    errorIfReadyFirst = provider.ready.then(function () { return Promise.reject(); });
                    chai_1.expect(provider.get('editor.fontSize')).to.be.undefined;
                    resolveWhenFinished.resolve();
                    fileService.releaseContent.resolve(); // Allow the initialization to run
                    // This promise would reject if the provider had declared itself ready before we resolve `resolveWhenFinished`
                    return [4 /*yield*/, Promise.race([resolveWhenFinished.promise, errorIfReadyFirst])];
                case 1:
                    // This promise would reject if the provider had declared itself ready before we resolve `resolveWhenFinished`
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it('should report values in file when `ready` resolves.', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    fileService.releaseContent.resolve();
                    return [4 /*yield*/, provider.ready];
                case 1:
                    _a.sent();
                    chai_1.expect(provider.get('editor.fontSize')).to.equal(20); // The value provided by the mock FileService implementation.
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=abstract-resource-preference-provider.spec.js.map