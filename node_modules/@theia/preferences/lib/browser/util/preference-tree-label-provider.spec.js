"use strict";
/********************************************************************************
 * Copyright (C) 2020 Ericsson and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-explicit-any */
var jsdom_1 = require("@theia/core/lib/browser/test/jsdom");
var disableJSDOM = jsdom_1.enableJSDOM();
var frontend_application_config_provider_1 = require("@theia/core/lib/browser/frontend-application-config-provider");
var application_props_1 = require("@theia/application-package/lib/application-props");
frontend_application_config_provider_1.FrontendApplicationConfigProvider.set(__assign({}, application_props_1.ApplicationProps.DEFAULT.frontend.config));
var chai_1 = require("chai");
var inversify_1 = require("@theia/core/shared/inversify");
var preference_tree_generator_1 = require("./preference-tree-generator");
var preference_tree_label_provider_1 = require("./preference-tree-label-provider");
disableJSDOM();
describe('preference-tree-label-provider', function () {
    var preferenceTreeLabelprovider;
    beforeEach(function () {
        var container = new inversify_1.Container();
        container.bind(preference_tree_generator_1.PreferenceTreeGenerator).toConstantValue({ getCustomLabelFor: function () { } });
        preferenceTreeLabelprovider = container.resolve(preference_tree_label_provider_1.PreferenceTreeLabelProvider);
    });
    it('PreferenceTreeLabelProvider.format', function () {
        var testString = 'aaaBbbCcc Dddd eee';
        chai_1.expect(preferenceTreeLabelprovider['formatString'](testString)).eq('Aaa Bbb Ccc Dddd eee');
    });
    it('PreferenceTreeLabelProvider.format.Chinese', function () {
        var testString = '某個設定/某个设定';
        chai_1.expect(preferenceTreeLabelprovider['formatString'](testString)).eq('某個設定/某个设定');
    });
    it('PreferenceTreeLabelProvider.format.Danish', function () {
        var testString = 'indstillingPåEnØ';
        chai_1.expect(preferenceTreeLabelprovider['formatString'](testString)).eq('Indstilling På En Ø');
    });
    it('PreferenceTreeLabelProvider.format.Greek', function () {
        var testString = 'κάποιαΡύθμιση';
        chai_1.expect(preferenceTreeLabelprovider['formatString'](testString)).eq('Κάποια Ρύθμιση');
    });
    it('PreferenceTreeLabelProvider.format.Russian', function () {
        var testString = 'некоторыеНастройки';
        chai_1.expect(preferenceTreeLabelprovider['formatString'](testString)).eq('Некоторые Настройки');
    });
    it('PreferenceTreeLabelProvider.format.Armenian', function () {
        var testString = 'ինչ-որՊարամետր';
        chai_1.expect(preferenceTreeLabelprovider['formatString'](testString)).eq('Ինչ-որ Պարամետր');
    });
    it('PreferenceTreeLabelProvider.format.specialCharacters', function () {
        var testString = 'hyphenated-wordC++Setting';
        chai_1.expect(preferenceTreeLabelprovider['formatString'](testString)).eq('Hyphenated-word C++ Setting');
    });
    describe('PreferenceTreeLabelProvider.createLeafNode', function () {
        it('when property constructs of three parts the third part is the leaf', function () {
            var property = 'category-name.subcategory.leaf';
            var expectedName = 'Leaf';
            testLeafName(property, expectedName);
        });
        it('when property constructs of two parts the second part is the leaf', function () {
            var property = 'category-name.leaf';
            var expectedName = 'Leaf';
            testLeafName(property, expectedName);
        });
        function testLeafName(property, expectedName) {
            var expectedSelectableTreeNode = {
                id: "group@" + property,
                parent: undefined,
                visible: true,
                selected: false,
                depth: 2,
                preference: { data: {} }
            };
            chai_1.expect(preferenceTreeLabelprovider['getName'](expectedSelectableTreeNode)).deep.eq(expectedName);
        }
    });
});
//# sourceMappingURL=preference-tree-label-provider.spec.js.map